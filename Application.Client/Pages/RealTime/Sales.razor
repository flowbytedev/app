@page "/rt/sales"
@* @rendermode InteractiveWebAssembly *@
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using Application.Shared.Models.RealTime
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject StateContainer _stateContainer
@implements IAsyncDisposable
@implements IDisposable
@attribute [Authorize]


<PageTitle>Real Time Sales</PageTitle>

<Toolbar Title="Real Time Sales" />

@if(LastUpdated is not null)
{
    <KpiCard @ref="KpiCardRef" Title="Total Amount"/>
}



<FluentGrid Spacing="1" AdaptiveRendering="true" Justify="@JustifyContent.FlexStart" >


    <FluentGridItem xs="12" sm="8" >

        <LineChart Title="Real Time Sales" Labels="@ChartLabels" Values="@ChartValues" />
    </FluentGridItem>
    <FluentGridItem xs="12" sm="4" style="height: 500px; overflow-x:auto; background-color: white; border-radius: 10px; padding:10px; margin-top:15px">
        <div class="table-label">Sales Data By Store</div>

        <FluentDataGrid @ref="grid" Items="@SalesLinesQuery" TGridItem="SalesLineRealTime">
            <PropertyColumn Property="@(c => c.CompanyId)" InitialSortDirection=SortDirection.Descending Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch type="search" Autofocus=true @bind-Value=SelectedStore @oninput="HandleStoreFilter" @bind-Value:after="HandleClear" Placeholder="Store Name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(c => c.Scheme)" InitialSortDirection=SortDirection.Descending Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch type="search" Autofocus=true @bind-Value=SelectedStore @oninput="HandleStoreFilter" @bind-Value:after="HandleClear" Placeholder="Store Name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(c => c.StoreCode)" InitialSortDirection=SortDirection.Descending Sortable="true" Filtered="!string.IsNullOrWhiteSpace(SelectedStore)">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch type="search" Autofocus=true @bind-Value=SelectedStore @oninput="HandleStoreFilter" @bind-Value:after="HandleClear" Placeholder="Store Name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <PropertyColumn Property="@(c => c.NetAmountAcy.ToString("##,##"))" Title="Total Sales" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true>
            </PropertyColumn>


        </FluentDataGrid>
    </FluentGridItem>



</FluentGrid>



@code {
    private FluentDataGrid<SalesLineRealTime>? grid;
    private HubConnection? hubConnection;
    private List<List<SalesLineRealTime>> messages = new();
    private List<List<SalesLineRealTime>> FilteredData = new();
    private string SelectedStore { get; set; }
    private IEnumerable<string> Stores = new List<string>();
    private decimal TotalAmount { get; set; }
    private DateTime? LastUpdated { get; set; }
    private IQueryable<SalesLineRealTime> SalesLinesQuery { get; set; } //= Enumerable.Empty<SalesLineRealTime>().AsQueryable();
    private string[] ChartLabels { get; set; }
    private decimal[] ChartValues { get; set; }
    private List<SalesLineRealTime> salesLine;
    private string[] Columns { get; set; } = new string[] { "StoreCode", "NetAmountAcy" };
    private KpiCard KpiCardRef;

    protected override async Task OnInitializedAsync()
    {



        var salesLinesTemp = await _client.GetFromJsonAsync<List<SalesLineRealTime>>("api/rt/sales/agg/store");


        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/datahub"))
            .Build();



        hubConnection.On<List<SalesLineRealTime>>("ReceiveData", async (salesLine) =>
        {

            if (salesLine.Count > 0)
            {

                messages.Add(salesLine);

                // await JSPrint(messages);
            }
            else
            {
                messages.Add(salesLinesTemp);
            }


            // get the last message from messages
            messages = messages.TakeLast(25).ToList();




            Stores = salesLine.Select(s => s.StoreCode).Distinct().ToList();



            if (!String.IsNullOrEmpty(SelectedStore))
            {
                FilteredData = messages.Where(s => s.Any(x => x.StoreCode == SelectedStore)).ToList();
            }
            else
            {
                FilteredData = messages;
            }


            // get the last from messages
            SalesLinesQuery = messages.LastOrDefault().AsQueryable();


            await grid.RefreshDataAsync();


            ChartLabels = FilteredData.Select(d => d.First().DateTime?.ToString("HH:mm:ss")).ToArray(); //yyyy-MM-dd HH:mm
            ChartValues = FilteredData.Select(d => d.Sum(x => x.NetAmountAcy)).ToArray();


            await UpdateChartAsync();
            await InvokeAsync(StateHasChanged);








        });



        await hubConnection.StartAsync();

    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public void Dispose()
    {
        _stateContainer.OnChange -= StateHasChanged;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ChartLabels = FilteredData.Select(d => d.First().DateTime?.ToString("HH:mm:ss")).ToArray(); //yyyy-MM-dd HH:mm
        ChartValues = FilteredData.Select(d => d.Sum(x => x.NetAmountAcy)).ToArray();

        if (firstRender)
        {
            FilteredData = new List<List<SalesLineRealTime>>();
            // Initialize Chart.js once data is loaded
            await LoadChartAsync();
        }
    }


    private async Task JSPrint(object obj)
    {
        await _jsRuntime.InvokeVoidAsync("printObject", obj);
    }


    private void HandleStoreFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            SalesLinesQuery = FilteredData.First().Where(s => s.StoreCode.Contains(value)).AsQueryable();
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(SelectedStore))
        {
            SelectedStore = string.Empty;
        }
    }


    private async Task LoadChartAsync()
    {
        var labels = FilteredData.Select(d => d.First().DateTime?.ToString("HH:mm:ss")).ToArray(); //yyyy-MM-dd HH:mm
        var values = FilteredData.Select(d => d.First().NetAmountAcy).ToArray();

        var chartConfig = new
        {
            type = "line",
            data = new
            {
                labels,
                datasets = new[]
                {
                    new
                    {
                        label = "Net Amount (ACY)",
                        data = values,
                        fill = true,
                        borderColor = "#059669",
                        backgroundColor = "#ECFDF5",
                        tension = 0.4,
                        pointRadius = 4,
                        pointBackgroundColor = "#059669",
                        pointBorderColor = "#fff",
                        pointBorderWidth = 2
                    }
                }
            },
            options = new
            {
                responsive = true,
                plugins = new
                {
                    legend = new
                    {
                        position = "top"
                    }
                }
            }
        };

        // Pass chartConfig to JavaScript to render the chart
        await _jsRuntime.InvokeVoidAsync("renderChart", "salesChart", chartConfig);

    }

    private async Task UpdateChartAsync()
    {
        var labels = FilteredData.Select(d => d.First().DateTime?.ToString("HH:mm:ss")).ToArray(); // Adjust as necessary
        var values = FilteredData.Select(d => d.Sum(x => x.NetAmountAcy)).ToArray();

        TotalAmount = FilteredData.Select(d => d.Sum(x => x.NetAmountAcy)).LastOrDefault();
        LastUpdated = FilteredData.Select(d => d.First().DateTime).LastOrDefault();

        await _jsRuntime.InvokeVoidAsync("updateChart", "salesChart", labels, values);


        // await _jsRuntime.InvokeVoidAsync("updateRealTimeSalesKPI", TotalAmount, LastUpdated);

        if (KpiCardRef != null)
        {
            await KpiCardRef.UpdateKpiAsync(TotalAmount.ToString("$ ##,##"), LastUpdated.Value.ToString("yyyy-MM-dd hh:mm:ss"));
        }
    }


}


