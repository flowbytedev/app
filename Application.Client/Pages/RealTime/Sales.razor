@page "/rt/sales"
@* @rendermode InteractiveAuto *@
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using Application.Shared.Models.RealTime
@inject NavigationManager Navigation
@inject ClientAuthenticationDetail _clientAuthDetail
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject StateContainer _stateContainer
@implements IAsyncDisposable
@implements IDisposable
@attribute [Authorize]




<PageTitle>Real Time Sales</PageTitle>

<Toolbar Title="Real Time Sales" HasFilter="true" OnFilterClick="OpenFilterPanel">

    <FluentButton IconEnd="@(new Icons.Regular.Size20.CardUi())"
                  Title="Filter"
                  Appearance="@(ShowAllSchemeCards ? Appearance.Accent : Appearance.Stealth)"
                  OnClick="@(OnShowAllSchemeCards)" />

    <FluentButton IconEnd="@(new Icons.Regular.Size20.Table())"
                  Title="Filter"
                  Appearance="@(ShowTable ? Appearance.Accent : Appearance.Stealth)"
                  OnClick="@(OnShowTable)" />


    <FluentButton IconEnd="@(new Icons.Regular.Size20.ChartMultiple())"
                  Title="Filter"
                  Appearance="@(ShowChart ? Appearance.Accent : Appearance.Stealth)"
                  OnClick="@(OnShowChart)" />


</Toolbar>

@if(ShowFilters)
{
    <div style="padding: 10px; margin-bottom: 25px;background-color: white;border-radius: 10px;">
        @if(StoreSchemes is not null)
        {
            <FluentSelect Label="Select Scheme" 
            Appearance="Appearance.Filled"
            TOption="string"
            Items="@StoreSchemes"
            Immediate="true"
            @bind-Value="@SelectedScheme"
            SelectedOptionChanged="FilterData"
            />
        }

    </div>
}   




<FluentGrid Spacing="1" AdaptiveRendering="true" Justify="@JustifyContent.FlexStart">
    <FluentGridItem xs="12" sm="4">
        <KpiCard @ref="KpiCardRef" Id="amount" Title="Total Amount" />
    </FluentGridItem>

    <FluentGridItem xs="12" sm="4">
        <KpiCard @ref="KpiTotalTransactionsRef" Id="transactions" Title="Total Transactions" />
    </FluentGridItem>

    <FluentGridItem xs="12" sm="4">
        <KpiCard @ref="KpiAverageBasketRef" Id="basket" Title="Average Basket" />
    </FluentGridItem>
</FluentGrid>


@if(ShowAllSchemeCards)
{

    var storeSchemes = StoreSchemes.Where(x => !String.IsNullOrEmpty(x))
                                    .Where(x => !String.IsNullOrEmpty(SelectedScheme) ? x == SelectedScheme : true);
    @foreach (var scheme in storeSchemes)//StoreSchemes.Where(x => !String.IsNullOrEmpty(x)))
    {


        var totalAmount = FilteredData.Select(d => d.Where(x => x.Scheme == scheme).Sum(x => x.NetAmountAcy)).LastOrDefault();
        var totalTransactions = FilteredData.Select(d => d.Where(x => x.Scheme == scheme).Sum(x => x.TotalTransactions)).LastOrDefault();
        var averageBasket = totalTransactions > 0 && totalAmount > 0 ? totalAmount / totalTransactions : 0;

        KpiCard kpiCardRef = new KpiCard();
        KpiCard kpiTotalTransactionsRef = new KpiCard();
        KpiCard kpiAverageBasketRef = new KpiCard();


        <FluentGrid Spacing="1" AdaptiveRendering="true" Justify="@JustifyContent.FlexStart">
            <FluentGridItem xs="12" sm="4">
                <KpiCard @ref="kpiCardRef" Id="@($"amount-{scheme}")" Title="@($"Total Amount ({scheme})")" Value="@totalAmount.ToString("##,##")" />
            </FluentGridItem>

            <FluentGridItem xs="12" sm="4">
                <KpiCard @ref="kpiTotalTransactionsRef" Id="@($"transaction-{scheme}")" Title="@($"Transactions ({scheme})")" Value="@totalTransactions.ToString("##,##")" />
            </FluentGridItem>

            <FluentGridItem xs="12" sm="4">
                <KpiCard @ref="kpiAverageBasketRef" Id="@($"basket-{scheme}")" Title="@($"Avg Basket ({scheme})")" Value="@averageBasket.ToString("##,##")" />
            </FluentGridItem>
        </FluentGrid>

    }

}











<FluentGrid Spacing="1" AdaptiveRendering="true" Justify="@JustifyContent.FlexStart" >


    <FluentGridItem xs="12" sm="@(ShowTable ? 8 : 12)" Style='@(ShowChart == true ? "" : "display:none")'>

        <LineChart Title="Real Time Sales" />

    </FluentGridItem>


    @if(ShowTable)
    {
        <FluentGridItem xs="12" sm="@(ShowChart ? 4 : 12)" style="overflow-x:auto; background-color: white; border-radius: 10px; padding:10px; margin-top:5px; margin-bottom:5px; min-height:575px;max-height: 575px;">
            <div class="table-label">Sales Data By Store</div>

            <FluentDataGrid @ref="grid" Items="@SalesLinesQuery" TGridItem="SalesLineRealTime">
                <PropertyColumn Title="Scheme" Property="@(c => c.Scheme)" InitialSortDirection=SortDirection.Descending Sortable="true" Filtered="!string.IsNullOrWhiteSpace(SelectedScheme)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=SelectedScheme @oninput="HandleSchemeFilter" @bind-Value:after="HandleClear" Placeholder="Store Scheme..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>

                <PropertyColumn Title="Store" Property="@(c => c.StoreCode)" InitialSortDirection=SortDirection.Descending Sortable="true" Filtered="!string.IsNullOrWhiteSpace(SelectedStore)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true @bind-Value=SelectedStore @oninput="HandleStoreFilter" @bind-Value:after="HandleClear" Placeholder="Store Name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>

                <PropertyColumn Property="@(c => c.NetAmountAcy.ToString("##,##"))" Title="Sales" InitialSortDirection=SortDirection.Descending Sortable="true" />

                <PropertyColumn Property="@(c => c.TotalTransactions.ToString("##,##"))" Title="Transactions" InitialSortDirection=SortDirection.Descending Sortable="true" />

                <PropertyColumn Property="@(c => (c.NetAmountAcy / c.TotalTransactions).ToString("##,##"))" Title="AVG Basket" InitialSortDirection=SortDirection.Descending Sortable="true" />


            </FluentDataGrid>
        </FluentGridItem>
    }





</FluentGrid>


@code {

    [SupplyParameterFromQuery(Name = "c")]
    private string? companyId { get; set; }

    private string? ErrorMessage { get; set; }

    private IList<string> PageRoles { get; set; }

    private FluentDataGrid<SalesLineRealTime>? grid;
    private HubConnection? hubConnection;
    private List<List<SalesLineRealTime>> messages = new();
    private List<List<SalesLineRealTime>> FilteredData = new();
    private IList<string> UserRoles = new List<string>();

    private decimal TotalAmount { get; set; }
    private int TotalTransactions { get; set; }
    private decimal AverageBasket { get; set; }
    private DateTime? LastUpdated { get; set; } = DateTime.Now;
    private IQueryable<SalesLineRealTime> SalesLinesQuery { get; set; } 
    private string[] ChartLabels { get; set; }
    private decimal[] ChartValues { get; set; }
    private List<SalesLineRealTime> salesLine;



    public bool ShowAllSchemeCards { get; set; } = false;
    public bool ShowChart { get; set; } = true;
    public bool ShowTable { get; set; } = true;


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;




    private bool ShowFilters { get; set; }

    private List<string> Stores = new List<string>();
    private List<string> StoreSchemes = new List<string>();


    private string SelectedScheme { get; set; }
    private string SelectedStore { get; set; }


    private KpiCard KpiCardRef;
    private KpiCard KpiTotalTransactionsRef;
    private KpiCard KpiAverageBasketRef;

    protected override async Task OnInitializedAsync()
    {


        FilteredData = new List<List<SalesLineRealTime>>();

        List<SalesLineRealTime> salesLinesTemp = new List<SalesLineRealTime>();

        if(String.IsNullOrEmpty(companyId))
        {
            var userId = await _clientAuthDetail.GetUserId();

            var defaultCompanyId = await GetUserDefaultCompany(userId);


            _navigationManager.NavigateTo($"rt/sales?c={defaultCompanyId.Id}");


        }

        var pageRoles = await _client.GetFromJsonAsync<List<ApplicationPageRole>>("api/app/page-roles?page=RealTimeSales");

        PageRoles = pageRoles.Select(p => p.IdentityRoleId).ToArray();


        UserRoles = await GetUserRoles();


        bool hasMatchingRole = PageRoles.Intersect(UserRoles).Any();

        await JSPrint(hasMatchingRole);

        // if(!UserRoles.Contains($"{companyId}_Sales"))
        if (!UserRoles.Any(r => PageRoles.Contains(r)))
        {
            ErrorMessage = "You do not have access to this page";
            Console.WriteLine(ErrorMessage);


            _navigationManager.NavigateTo($"/unauthorized?c={companyId}&page=RealTimeSales");

            return;
        }
        else
        {
            ErrorMessage = String.Empty;

            Console.WriteLine("You have access to the page");
        }




        salesLinesTemp = await _client.GetFromJsonAsync<List<SalesLineRealTime>>("api/rt/sales/agg/store");

        SalesLinesQuery = salesLinesTemp.AsQueryable();

        FilteredData = new List<List<SalesLineRealTime>> { salesLinesTemp };


        // store scheme has an empty and from salesline
        StoreSchemes = salesLinesTemp.OrderByDescending(s => s.NetAmountAcy).Select(s => s.Scheme).Distinct().ToList();

        // add empty string to the start of StoreSchemes
        StoreSchemes.Insert(0, String.Empty);


        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/datahub"))
            .Build();




        hubConnection.On<List<SalesLineRealTime>>("ReceiveData", async (salesLine) =>
        {



            if (UserRoles.Any(r => PageRoles.Contains(r)))
            {

                // store scheme has an empty and from salesline
                StoreSchemes = salesLine.Select(s => s.Scheme).Distinct().ToList();
                // add empty string to the start of StoreSchemes
                StoreSchemes.Insert(0, String.Empty);

                salesLine.OrderBy(s => s.NetAmountAcy);

                if (!String.IsNullOrEmpty(SelectedScheme))
                {
                    salesLine = salesLine.Where(s => s.Scheme == SelectedScheme).ToList();
                }

                if (salesLine.Count > 0)
                {

                    messages.Add(salesLine);

                }
                else
                {
                    messages.Add(salesLinesTemp);
                }


                // get the last message from messages
                messages = messages.TakeLast(25).ToList();

                // FilteredData = messages;
                FilteredData = messages
                                    .Select(innerList => innerList
                                        .Where(sale => !String.IsNullOrEmpty(SelectedScheme) ? sale.Scheme == SelectedScheme : true)
                                        .ToList())
                                    .Where(innerList => innerList.Any())
                                    .ToList();

                // get the last from messages
                SalesLinesQuery = messages.LastOrDefault().AsQueryable();


                await grid.RefreshDataAsync();


                await UpdateChartAsync();
                await InvokeAsync(StateHasChanged);
            }


        });



        await hubConnection.StartAsync();

        await LoadChartAsync();



    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadChartAsync();
        }


    }


    private async Task<Company> GetUserDefaultCompany(string userId)
    {

        // add userId to the header
        _client.DefaultRequestHeaders.Remove("userId");
        _client.DefaultRequestHeaders.Add("userId", userId);

        var companies = await _client.GetFromJsonAsync<List<Company>>("api/companies");

        // // get the first company
        return companies.FirstOrDefault();
    }


    private async Task<IList<string>> GetUserRoles()
    {


        // remove x-company-id from header
        _client.DefaultRequestHeaders.Remove("X-Company-ID");

        // add x-company-id to header
        _client.DefaultRequestHeaders.Add("X-Company-ID", companyId);

        return await _client.GetFromJsonAsync<IList<string>>($"api/users/roles");

    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public void Dispose()
    {
        _stateContainer.OnChange -= StateHasChanged;
    }



    public void OnShowAllSchemeCards()
    {
        ShowAllSchemeCards = !ShowAllSchemeCards;
    }


    public async Task OnShowChart()
    {
        ShowChart = !ShowChart;

        // await ResetChart("salesChart");
        await LoadChartAsync();

    }

    public void OnShowTable()
    {
        ShowTable = !ShowTable;
    }


    private void OpenFilterPanel()
    {
        // change the showFilters value
        ShowFilters = !ShowFilters;

    }

    private async void FilterData()
    {

        // Filter the Sales list in-place to include only "HAPPY" scheme
        FilteredData = messages
            .Select(innerList => innerList
                .Where(sale => !String.IsNullOrEmpty(SelectedScheme) ? sale.Scheme == SelectedScheme : true)
                .ToList())
            .Where(innerList => innerList.Any()) 
            .ToList();


        if(FilteredData.Count() > 0)
        {
            SalesLinesQuery = FilteredData.LastOrDefault().AsQueryable();
        }



        await grid.RefreshDataAsync();

        await ResetChart("salesChart");

        await LoadChartAsync();


        await InvokeAsync(StateHasChanged);
    }




    private void HandleStoreFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            SalesLinesQuery = FilteredData.First().Where(s => s.StoreCode.Contains(value)).AsQueryable();
        }
    }

    private void HandleSchemeFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            SalesLinesQuery = FilteredData.First().Where(s => s.Scheme.Contains(value)).AsQueryable();
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(SelectedStore))
        {
            SelectedStore = string.Empty;
        }
    }




    private async Task JSPrint(object obj)
    {
        await _jsRuntime.InvokeVoidAsync("printObject", obj);
    }



    private async Task ResetChart(string chartId)
    {
        var config = GetChartConfig(new string[] { }, new decimal[] { });
        await _jsRuntime.InvokeVoidAsync("resetChart", "salesChart", config);
    }

    private async Task LoadChartAsync()
    {
        var labels = new string[] { };
        var values = new decimal[] { };


        if(FilteredData is not null && FilteredData.Count() > 0)
        {
            // get the sum of all labels group by their time
            labels = FilteredData.TakeLast(25).Aggregate((a, b) => a.Concat(b).ToList())
                .GroupBy(d => d.DateTime?.ToString("HH:mm:ss"))
                .Select(d => d.First().DateTime?.ToString("HH:mm:ss")).ToArray();


            values = FilteredData.TakeLast(25).Aggregate((a, b) => a.Concat(b).ToList())
                .GroupBy(d => d.DateTime?.ToString("HH:mm:ss"))
                .Select(d => d.Sum(x => x.NetAmountAcy)).ToArray();
        }

        else {
            labels = new string[] { };
            values = new decimal[] { };
        }


        var chartConfig = GetChartConfig(labels, values);


        // Pass chartConfig to JavaScript to render the chart
        await _jsRuntime.InvokeVoidAsync("renderChart", "salesChart", chartConfig);


        if (FilteredData.Count() > 0)
        {
            await UpdateKpiCardsAsync();
        }
        
    }


    private object GetChartConfig(string[] labels, decimal[] values)
    {
        var chartConfig = new
        {
            type = "line",
            data = new
            {
                labels,
                datasets = new[]
                {
                    new
                    {
                        label = "Net Amount (ACY)",
                        data = values,
                        fill = true,
                        borderColor = "#059669",
                        backgroundColor = "#ECFDF5",
                        tension = 0.4,
                        pointRadius = 4,
                        pointBackgroundColor = "#059669",
                        pointBorderColor = "#fff",
                        pointBorderWidth = 2
                    }
                }
            },
            options = new
            {
                responsive = true,
                plugins = new
                {
                    legend = new
                    {
                        position = "top"
                    }
                }
            }
        };


        return chartConfig;
    }


    private async Task UpdateChartAsync()
    {
        var labels = FilteredData.Select(d => d.First().DateTime?.ToString("HH:mm:ss")).ToArray(); // Adjust as necessary
        var values = FilteredData.Select(d => d.Sum(x => x.NetAmountAcy)).ToArray();

        var chartConfig = GetChartConfig(labels, values);

        await _jsRuntime.InvokeVoidAsync("updateChart", "salesChart", labels, values, chartConfig);


        await UpdateKpiCardsAsync();
    }


    private async Task UpdateKpiCardsAsync()
    {

        TotalAmount = FilteredData.Select(d => d.Sum(x => x.NetAmountAcy)).LastOrDefault();
        TotalTransactions = FilteredData.Select(d => d.Sum(x => x.TotalTransactions)).LastOrDefault();
        AverageBasket = TotalTransactions > 0 && TotalAmount > 0 ? TotalAmount / TotalTransactions : 0;
        LastUpdated = FilteredData.Select(d => d.First().DateTime).LastOrDefault();


        if (KpiCardRef != null)
        {
            await KpiCardRef.UpdateKpiAsync(TotalAmount.ToString("$ ##,##"), LastUpdated.Value.ToString("yyyy-MM-dd hh:mm:ss"));
        }

        if (KpiTotalTransactionsRef != null)
        {
            await KpiTotalTransactionsRef.UpdateKpiAsync(TotalTransactions.ToString("##,##"), LastUpdated.Value.ToString("yyyy-MM-dd hh:mm:ss"));
        }

        if (KpiAverageBasketRef != null)
        {
            await KpiAverageBasketRef.UpdateKpiAsync(AverageBasket.ToString("$ ##,##"), LastUpdated.Value.ToString("yyyy-MM-dd hh:mm:ss"));
        }
    }



}


