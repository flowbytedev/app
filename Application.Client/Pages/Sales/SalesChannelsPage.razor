@page "/sales/channels"
@inject HttpClient _client
@inject NavigationManager _navigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))





<Toolbar Title="Sales Channels">
</Toolbar>




<FluentGrid Spacing="1" AdaptiveRendering="true" Justify="@JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-1); padding: 4px; border-radius: 5px; ">
    <FluentGridItem xs="12">
        <div style="height: 75vh; overflow-x:auto; display:flex;">
            <FluentDataGrid 
                @ref="salesChannelDataGrid"
                Items="@FilteredItems"
                ResizableColumns=true
                ResizeType="@DataGridResizeType.Exact"
                HeaderCellAsButtonWithMenu="true"
                Pagination="@pagination"
                TGridItem="SalesChannel"
                OnRowFocus="HandleRowFocus"
                GridTemplateColumns="0.2fr 0.2  fr 0.2fr 0.2fr 0.2fr"
                ShowHover="true">

                <PropertyColumn Property="@(c => c.StoreGroup)" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true Comparer="@StringLengthComparer.Instance" Filtered="!string.IsNullOrWhiteSpace(Filter.StoreGroup)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true Immediate="true" ImmediateDelay="1000" @bind-Value="@Filter.StoreGroup" @bind-Value:after="@(() => HandleFilter())" Placeholder="group..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(c => c.Code)" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true Comparer="@StringLengthComparer.Instance" Filtered="!string.IsNullOrWhiteSpace(Filter.Code)">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="search" Autofocus=true Immediate="true" ImmediateDelay="1000" @bind-Value="@Filter.Code" @bind-Value:after="@(() => HandleFilter())" Placeholder="group..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>

                <PropertyColumn Property="@(c => c.Name)" Sortable="true" Align="Align.Start" />
                <PropertyColumn Property="@(c => c.Region)" Sortable="true" Align="Align.Start" />
                <PropertyColumn Property="@(c => c.Address)" Sortable="true" Align="Align.Start" />

                <TemplateColumn Title="Actions" Align="@Align.End">
                    <FluentButton aria-label="View Forecast" IconEnd="@(new Icons.Regular.Size16.ChartMultiple())" OnClick="@(() => _navigationManager.NavigateTo($"sales/channels/forecast?sc={context.Code}"))" />
                </TemplateColumn>

            </FluentDataGrid>
        </div>
    </FluentGridItem>
</FluentGrid>




<FluentPaginator State="@pagination">
    <SummaryTemplate>
        There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
    </SummaryTemplate>
    <PaginationTextTemplate>
        This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
    </PaginationTextTemplate>
</FluentPaginator>



@code {

    [SupplyParameterFromQuery(Name = "c")] private string? companyId { get; set; }

    [SupplyParameterFromQuery(Name = "sc")] private string? salesChannelCode { get; set; }
    private FluentDataGrid<SalesChannel> salesChannelDataGrid;
    private IQueryable<SalesChannel>? items;
    private List<SalesChannel> SalesChannelsList => items is null ? new List<SalesChannel>() : items.ToList();
    private SalesChannel Filter = new SalesChannel();
    private Dictionary<string, string>? FilterQuery = new Dictionary<string, string>();

    private PaginationState pagination = new PaginationState { ItemsPerPage = 1000 };

    private string nameFilter = string.Empty;

    private GridSort<SalesChannel> rankSort = GridSort<SalesChannel>
        .ByDescending(x => x.CompanyId)
        .ThenDescending(x => x.Code);

    // Uncomment line below when using the TemplateColumn example for the country _name
    private GridSort<SalesChannel> nameSort = GridSort<SalesChannel>.ByAscending(x => x.Code, StringLengthComparer.Instance);


    private IQueryable<SalesChannel>? FilteredItems => items?.Where(x => x.Code.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    protected override async Task OnParametersSetAsync()
    {
        items = (await GetSalesChannel()).AsQueryable();
    }


    public async Task<IEnumerable<SalesChannel>> GetSalesChannel(string? filterQuery = null)
    {
        // add company id to client header
        _client.DefaultRequestHeaders.Remove("X-Company-ID");
        _client.DefaultRequestHeaders.Add("X-Company-ID", companyId);

        var items = await _client.GetFromJsonAsync<Response<List<SalesChannel>>>($"api/sales/channels?{filterQuery}");

        return items.Items;
    }


    private void UpdateFilterQueryWithReflection()
    {
        FilterQuery.Clear();

        var properties = typeof(SalesChannel).GetProperties();
        foreach (var prop in properties)
        {
            var value = prop.GetValue(Filter);
            if (value is string stringValue && !string.IsNullOrWhiteSpace(stringValue))
            {
                // Use the property name as key, e.g. "Code", "Name", etc.
                FilterQuery[prop.Name] = stringValue;
            }
        }
    }

    private string BuildFilterQueryString(Dictionary<string, string>? filterDict)
    {
        if (filterDict == null || filterDict.Count == 0)
            return string.Empty;

        // Convert each key-value pair into "Filter.Key=URL-ENCODED-VALUE"
        var queryParams = filterDict.Select(
            kvp => $"Filter.{kvp.Key}={Uri.EscapeDataString(kvp.Value)}"
        );

        // Join them with '&' and prepend a '?'
        return string.Join("&", queryParams);
    }

    private async Task HandleFilter() //ChangeEventArgs args
    {

        // foreach (var prop in typeof(SalesChannel).GetProperties())
        // {
        //     if (prop.Name == propertyName)
        //     {
        //         prop.SetValue(Filter, args.Value);
        //     }
        // }

        UpdateFilterQueryWithReflection();

        // Build something like "?Filter.Code=ABC&Filter.Name=XYZ"
        string queryString = BuildFilterQueryString(FilterQuery);


        items = (await GetSalesChannel(queryString)).AsQueryable();


    }

    private async Task HandleFilter3(ChangeEventArgs args, string propertyName) //ChangeEventArgs args
    {
        // if (args.Value is string value)
        // {
        //     nameFilter = value;
        // }

        foreach (var prop in typeof(SalesChannel).GetProperties())
        {
            if (prop.Name == propertyName)
            {
                prop.SetValue(Filter, args.Value);
            }
        }

        
        UpdateFilterQueryWithReflection();

        // Build something like "?Filter.Code=ABC&Filter.Name=XYZ"
        string queryString = BuildFilterQueryString(FilterQuery);

        
        items = (await GetSalesChannel(queryString)).AsQueryable();


    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private void HandleRowFocus(FluentDataGridRow<SalesChannel> row)
    {
        Console.WriteLine($"[Custom comparer] Row focused: {row.Item?.Code}");
    }

    public class StringLengthComparer : IComparer<string>
    {
        public static readonly StringLengthComparer Instance = new StringLengthComparer();

        public int Compare(string? x, string? y)
        {
            if (x is null)
            {
                return y is null ? 0 : -1;
            }

            if (y is null)
            {
                return 1;
            }

            return x.Length.CompareTo(y.Length);
        }
    }
}
