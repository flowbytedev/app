@page "/unauthorized"
@inject HttpClient _client
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))


@if(!String.IsNullOrEmpty(companyId) && !String.IsNullOrEmpty(page))
{
    <div class="container">
        <div class="form-section">
            <div class="icon">🔒</div>
            <h1>Access Required</h1>
            <p>Please fill out this form to request access.</p>

            <EditForm Model="@UserAccessRequest" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <FluentValidationSummary />
                <div class="form-group">
                    <label for="name">Full Name</label>
                    <FluentTextField Name="full name" id="name" @bind-Value="@UserAccessRequest.FullName" Required Style="width:100%" />
                    <FluentValidationMessage For="@(() => UserAccessRequest.FullName)" />
                </div>

                <div class="form-group">
                    <label for="email">Email</label>
                    <FluentTextField Name="email" id="email" @bind-Value="@UserAccessRequest.Email" Required Style="width:100%" />
                    <FluentValidationMessage For="@(() => UserAccessRequest.Email)" />
                </div>

                <div class="form-group">

                    <FluentSelect TOption="string"
                    Label="Select a department"
                    Style="width:100%"
                    Items="@Deprtments"
                    Id="people-listbox"
                    Width="200px"
                    Height="250px"
                    Placeholder="Make a selection..."
                    OptionValue="@(p => p)"
                    OptionText="@(p => p)"
                    @bind-Value="@UserAccessRequest.Department"
                    @bind-SelectedOption="@UserAccessRequest.Department" />

                    <FluentValidationMessage For="@(() => UserAccessRequest.Department)" />
                </div>

                <div class="form-group">
                    <label for="manager">Manager's Name</label>
                    <FluentTextField Name="full name" @bind-Value="@UserAccessRequest.ManagerName" Required Style="width:100%" />
                    <FluentValidationMessage For="@(() => UserAccessRequest.ManagerName)" />
                </div>

                <div class="form-group">
                    <label for="reason">Reason for Access</label>
                    <FluentTextArea Name="full name" @bind-Value="@UserAccessRequest.Reason" Required Style="width:100%" />
                    <FluentValidationMessage For="@(() => UserAccessRequest.Reason)" />
                </div>

                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" style="width=100%;">Request Access</FluentButton>
            </EditForm>
        </div>

        <div class="content-section">
            <div class="content-message">
                <h1>Welcome!</h1>
                <p>This page contains restricted content. If you need access to view this information, please submit a request using the form on the left. We'll review your request and get back to you as soon as possible.</p>
                <p>For urgent access needs, please contact your department manager directly.</p>
            </div>
        </div>
    </div>
}





@code {


    [SupplyParameterFromQuery(Name = "c")] private string? companyId { get; set; }
    [SupplyParameterFromQuery(Name = "page")] private string? page { get; set; }

    [SupplyParameterFromForm]
    private UserAccessRequest UserAccessRequest { get; set; } = new UserAccessRequest();

    private ApplicationPage ApplicationPage = new ApplicationPage();

    private string[] Deprtments = new string[] {
        "Commercial",
        "Operation",
        "Marketing",
        "IT",
        "IS",
        "Finance"
    };


    private async Task HandleValidSubmit()
    {

        // remove companyId from the header
        _client.DefaultRequestHeaders.Remove("X-Company-ID");
        //add X-Company-ID to the header
        _client.DefaultRequestHeaders.Add("X-Company-ID", companyId);

        UserAccessRequest.ApplicationPageId = page;
        await _client.PostAsJsonAsync("api/app/pages/access-requests", UserAccessRequest);

        _navigationManager.NavigateTo("/");

        ShowToast();
    }


    void ShowToast()
    {
        var message = "Your access request has been submitted successfully!\nYou will be notified by email.";

        _toastService.ShowSuccess(message);
    }
}