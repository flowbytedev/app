@page "/data/tables/{Action?}/{IpAddress?}/{DatabaseName}/{Name?}"
@inject NavigationManager _navigationManager
@inject HttpClient _httpClient
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))


<Toolbar Title="Tables">
    <FluentButton Appearance="Appearance.Accent"
                  OnClick="@(() =>_navigationManager.NavigateTo($"data/tables/add?c={companyId}"))"
                  IconEnd="@(new Icons.Regular.Size24.AddCircle().WithColor(Color.Fill))">
        Add
    </FluentButton>
</Toolbar>


@if (ShowTable())
{
    <TablesList CompanyId="@companyId" />
}
else
{
    <AddTable Action="@Action" Table="@Table"/>
}


@code {

    [SupplyParameterFromQuery(Name = "c")]
    private string? companyId { get; set; }

    [Parameter] public string Action { get; set; } = "list";
    [Parameter] public string IpAddress { get; set; }
    [Parameter] public string DatabaseName { get; set; }
    [Parameter] public string Name { get; set; }

    public IQueryable<Table> Tables { get; set; }
    private IQueryable<Table>? items;
    private Table Filter = new Table();
    private Dictionary<string, string>? FilterQuery = new Dictionary<string, string>();

    public bool ShowTable() => Action == "list" && !String.IsNullOrEmpty(companyId);

    public Table Table { get; set; } = new Table();


    protected override async Task OnParametersSetAsync()
    {
        if ((Action == "edit" || Action == "details"))
        {

            Table = await _httpClient.GetFromJsonAsync<Table>($"api/tables/{IpAddress}/{DatabaseName}/{Name}");
        }
    }

}