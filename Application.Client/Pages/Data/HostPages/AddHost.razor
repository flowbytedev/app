@using Application.Shared.Services
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))


<EditForm Model="@Host" OnValidSubmit="@HandleValidSubmit" FormName="lottery_fluent_entry" novalidate>
    <DataAnnotationsValidator />
    <FluentValidationSummary />


    <FluentStack Orientation="Orientation.Vertical">
        <div>
            <FluentTextField Name="IP Address" @bind-Value="Host.IpAddress" Disabled="@(Action == "edit" ? true : Disabled)" style="width: 100%;" Label="IP Address" Required />
            <FluentValidationMessage For="@(() => Host.IpAddress)" />
        </div>

        <div>
            <FluentTextField Name="Name" @bind-Value="Host.Name" Disabled="@(Action == "edit" ? true : Disabled)" style="width: 100%;" Label="Name" Required />
            <FluentValidationMessage For="@(() => Host.Name)" />
        </div>

        <div>
            <FluentTextField Name="Type" @bind-Value="Host.Type" Disabled="@(Disabled)" style="width: 100%;" Label="Type" Required />
            <FluentValidationMessage For="@(() => Host.Type)" />
        </div>

        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
    </FluentStack>
</EditForm>


@code {

    [Parameter] public string Action { get; set; }

    [Parameter] public Host Host { get; set; } = new Host();

    public bool Disabled => (Action == "add" || Action == "edit") ? false : true;

    

    public int BlockQuantity { get; set; }



    private async void HandleValidSubmit()
    {

        HttpResponseMessage response = new HttpResponseMessage();

        if (Action == "add")
        {
            response = await _httpClient.PostAsJsonAsync("api/hosts", Host);
        }
        else if (Action == "edit")
        {
            response = await _httpClient.PutAsJsonAsync($"api/hosts/{Host.IpAddress}/{Host.Name}", Host);
        }


        if (response.IsSuccessStatusCode)
        {
            _toastService.ShowSuccess("A new host was created");

            // soft delay so that the user can read the message
            await Task.Delay(1000);

            _navigationManager.NavigateTo("data/hosts/list",forceLoad: true);
            
        }
        else
        {
            _toastService.ShowError("An error occurred while creating a new host");
        }



    }








}