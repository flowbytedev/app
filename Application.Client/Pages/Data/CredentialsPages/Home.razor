@page "/data/credentials/{Action?}/{IpAddress?}/{Name?}/{Username?}"
@inject NavigationManager _navigationManager
@inject HttpClient _httpClient
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))


<Toolbar Title="Database Credentials">
    <FluentButton Appearance="Appearance.Accent"
    OnClick="@(() =>_navigationManager.NavigateTo($"data/credentials/add?c={companyId}"))"
                  IconEnd="@(new Icons.Regular.Size24.AddCircle().WithColor(Color.Fill))">
        Add
    </FluentButton>
</Toolbar>

@if (ShowTable())
{
    <DatabaseCredentialsList CompanyId="@companyId" />
}
else
{
    <AddDatabaseCredential Action="@Action" DatabaseCredential="@DatabaseCredential"/>
}


@code {

    [SupplyParameterFromQuery(Name = "c")]
    private string? companyId { get; set; }

    [Parameter] public string Action { get; set; } = "list";
    [Parameter] public string IpAddress { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public string Username { get; set; }

    public IQueryable<DatabaseCredential> DatabaseCredentials { get; set; }

    private IQueryable<DatabaseCredential>? items;
    private DatabaseCredential Filter = new DatabaseCredential();
    private Dictionary<string, string>? FilterQuery = new Dictionary<string, string>();

    public bool ShowTable() => Action == "list" && !String.IsNullOrEmpty(companyId);

    public DatabaseCredential DatabaseCredential { get; set; } = new DatabaseCredential();


    // if parameter is changed
    protected override async Task OnParametersSetAsync()
    {
        if ((Action == "edit" || Action == "details") && !String.IsNullOrEmpty(IpAddress))
        {
            
            DatabaseCredential = await _httpClient.GetFromJsonAsync<DatabaseCredential>($"api/databaseCredentials/{IpAddress}/{Name}/{Username}");
        }
    }


}