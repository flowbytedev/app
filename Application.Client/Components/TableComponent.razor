

@inject HttpClient _client
@using System.Linq.Expressions
@typeparam TItem


@if(HasToolbar)
{
    <div style="padding:10px;min-width:800px">
        <FluentToolbar id="toolbar-fluent-components-two" style="width:100%">

            <h3 slot="label" style="margin-right:10px;">@Title</h3>

            <FluentButton IconEnd="@(new Icons.Regular.Size16.Add())"
            Title="Filter"
            Appearance="Appearance.Stealth"
            OnClick="@(OnToolbarAddClick)" />


        </FluentToolbar>
    </div>
}




    <FluentDataGrid role="grid"
                        Items="Items.AsQueryable()"
                        ResizableColumns="true"
                        AutoFit="true"
                        ShowHover="true"
                        OnRowDoubleClick="@(() => Console.WriteLine("Row double clicked!"))"
                        ItemSize="36"
                        Loading="IsLoading"
                        TGridItem="TItem">

        @* Dynamically create columns based on Columns array *@
        @foreach (var column in Columns)
        {
            <TemplateColumn Style="min-width:120px" Title="@column" Tooltip="true" Align="Align.Start" Sortable="true">
                <ChildContent>
                    @{
                        var value = GetPropertyValue(context, column);
                        // if type of value is decimal than only 2 decimal points
                        if (value is decimal)
                        {
                            value = ((decimal)value).ToString("##,##.##");
                        }
                    }
                    @* <span>@GetPropertyValue(context, column)</span> *@
                    <span>@value</span>
                </ChildContent>
            </TemplateColumn>
        }

        @* Static Actions Column *@
        @if(HasEdit || HasDelete)
        {
            <TemplateColumn Title="Actions" Align="@Align.End">
                @if (HasEdit)
                {
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OnEditClick.InvokeAsync(context))" />
                }

                @if (HasDelete)
                {
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(DeleteClicked)" />
                }
            </TemplateColumn>
        }

    </FluentDataGrid>




@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public bool HasToolbar { get; set; } = false;

    [Parameter] public IList<TItem> Items { get; set; }
    [Parameter] public TItem Item { get; set; }
    [Parameter] public string[] Columns { get; set; }
    [Parameter] public EventCallback GoToFirstPage { get; set; }
    [Parameter] public EventCallback GoToPreviousPageAsync { get; set; }
    [Parameter] public EventCallback GoToNextPageAsync { get; set; }

    [Parameter] public bool HasEdit { get; set; } = false;
    [Parameter] public EventCallback<TItem> OnEditClick { get; set; }
    [Parameter] public EventCallback OnToolbarAddClick { get; set; }
    [Parameter] public bool HasDelete { get; set; } = false;
    [Parameter] public EventCallback DeleteClicked { get; set; }

    [Parameter] public bool IsLoading { get; set; }


    PaginationState pagination = new PaginationState { ItemsPerPage = 100 };

    public bool ShowFilterSection { get; set; }
    private List<Dictionary<string, object>> dataTable;
    public string GridTemplateColumns { get; set; }




    // Method to get property value dynamically
    private object GetPropertyValue(TItem item, string propertyName)
    {
        var property = typeof(TItem).GetProperty(propertyName);
        return property != null ? property.GetValue(item) : "N/A";
    }


   




    
}