@inject IJSRuntime _jsRuntime


<div class="kpi-card">
    <div class="kpi-label">@Title</div>
    <div id="rts-kpi-value" class="kpi-value">
        @* @Value *@
    </div>
    <div class="kpi-trend">

        @if(HasComparison)
        {
            <span class="trend-positive">
                <span class="trend-arrow">↑</span>
                23.36%
            </span>
        }

        <span class="trend-text">last updated</span>
        <span id="rts-kpi-last-updated" class="trend-neutral">
            @* @(LastUpdated.ToString("yyyy-MM-dd hh:mm:ss")) *@
        </span>
    </div>
</div>



@code {
    [Parameter]
    public string Title { get; set; } = "Default Title";

    // [Parameter]
    // public string Value { get; set; } = "0";

    [Parameter] public bool HasComparison { get; set; } = false;
    [Parameter] public string Trend { get; set; } = "trend-positive"; // or it can be trend-negative, trend-neutral
                                                                      // [Parameter] public DateTime LastUpdated { get; set; } = DateTime.Now;

    private string ValueElementId { get; } = "rts-kpi-value";// + Guid.NewGuid().ToString();
    private string LastUpdatedElementId { get; } = "rts-kpi-last-updated";// + Guid.NewGuid().ToString();


    public async Task UpdateKpiAsync(string value, string lastUpdated)
    {
        await _jsRuntime.InvokeVoidAsync("updateRealTimeSalesKPI", ValueElementId, LastUpdatedElementId, value, lastUpdated);
    }
}
